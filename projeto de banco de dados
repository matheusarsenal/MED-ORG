#area relativa ao projeto de banco de dados

#modelo conceitual 
![Image](https://github.com/user-attachments/assets/4216bb19-ef05-42eb-8f30-10060b4cd1da)

#modelo logico

![Image](https://github.com/user-attachments/assets/32b86eb8-9505-489a-aed9-24d43788b695)

# modelo fisico em Myql

create database IF NOT EXISTS med_org;

USE med_org;

CREATE TABLE IF NOT exists paciente (
ID int auto_increment NOT NULL,
email varchar(200) NOT NULL,
senha varchar(300) NOT NULL,
CPF varchar(16) NOT NULL,
endereço varchar(100),
nome varchar(50) NOT NULL,
data_de_nascimento date NOT NULL,
sexo VARCHAR(15) CHECK (sexo IN ('Masculino', 'Feminino', 'Outro')),
PRIMARY KEY(ID,nome,CPF)

);

SELECT * FROM paciente; 

CREATE TABLE IF NOT exists medico (
ID int auto_increment NOT NULL,
nome varchar(50) NOT NULL,
email varchar(300) NOT NULL,
formação varchar(50) NOT NULL,
endereço varchar(50),
senha varchar(300) NOT NULL,
data_de_nascimento date NOT NULL,
sexo VARCHAR(20) CHECK (sexo IN ('Masculino', 'Feminino', 'Outro')) NOT NULL,
especialização varchar(40),
CRM varchar(30) NOT NULL, 
PRIMARY KEY(ID,CRM,nome)

);

SELECT * FROM medico;

CREATE TABLE IF NOT EXISTS secretario (
ID int auto_increment NOT NULL,
cpf varchar(40) NOT NULL,
nome varchar(50) NOT NULL,
email varchar(40) NOT NULL,
data_de_nascimento date NOT NULL,
endereço varchar(100),
telefone varchar(30) NOT NULL,
senha varchar(50) NOT NULL,
sexo VARCHAR(10) CHECK (sexo IN ('Masculino', 'Feminino', 'Outro')),
primary key(ID,cpf,nome)
);

SELECT * FROM secretario;


create table IF NOT exists hospital(
ID int auto_increment NOT NULL,
nome varchar(100) NOT NULL,
bairro varchar(100) NOT NULL,
rua varchar(100) NOT NULL,
PRIMARY KEY(ID,nome)

); 


SELECT * FROM hospital;


create table IF NOT exists agendamento(
ID int auto_increment NOT NULL,
consultorio varchar(20) NOT NULL,
data_consulta DATE NOT NULL,
hora TIME NOT NULL,
observacaoes text,
ID_medico int,
ID_hospital int,
ID_paciente int,
foreign key(ID_medico) references medico(ID),
foreign key(ID_hospital) references hospital(ID),
foreign key(ID_paciente) references paciente(ID),
PRIMARY KEY(ID)
);

SELECT * FROM agendamento;



CREATE TABLE IF NOT EXISTS consulta (
    ID int AUTO_INCREMENT NOT NULL,
    ID_paciente int NOT NULL,
    ID_medico int NOT NULL,
    data DATETIME NOT NULL,
    observacoes TEXT,
    FOREIGN KEY (ID_paciente) REFERENCES paciente(ID),
    FOREIGN KEY (ID_medico) REFERENCES medico(ID),
    primary key(ID)
);

SELECT * FROM consulta;

CREATE TABLE IF NOT EXISTS medicamento (
    ID int AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL,
    prescricao TEXT NOT NULL,
    ID_consulta int,
    FOREIGN KEY (ID_consulta) REFERENCES consulta(ID),
    primary key(ID)
);

SELECT * FROM medicamento;


DELIMITER $$

CREATE PROCEDURE Agenda_medico(IN p_id_medico INT)
BEGIN
    SELECT * 
    FROM agendamento
    WHERE ID_medico = p_id_medico
      AND data_consulta = CURDATE();
END $$

CREATE PROCEDURE Consulta_hospitais(IN p_id_paciente INT)
BEGIN
    DECLARE bairro_paciente VARCHAR(100);
    SELECT endereço INTO bairro_paciente
    FROM paciente
    WHERE ID = p_id_paciente;

    SELECT * 
    FROM hospital
    WHERE bairro = bairro_paciente;
END $$

CREATE PROCEDURE Agenda_semanal(IN p_id_hospital INT)
BEGIN
    SELECT * 
    FROM agendamento
    WHERE ID_hospital = p_id_hospital
      AND YEARWEEK(data_consulta, 1) = YEARWEEK(CURDATE(), 1);
END $$

CREATE FUNCTION Consultas_recente(p_id_paciente INT)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total
    FROM consulta
    WHERE ID_paciente = p_id_paciente
      AND data >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);

    RETURN total >= 3;
END $$

CREATE TRIGGER agendamento_geriatra
AFTER INSERT ON agendamento
FOR EACH ROW
BEGIN
    DECLARE idade INT;
    DECLARE geriatra_id INT;

    SELECT TIMESTAMPDIFF(YEAR, data_de_nascimento, CURDATE()) INTO idade
    FROM paciente
    WHERE ID = NEW.ID_paciente;

    IF idade >= 60 THEN
        SELECT ID INTO geriatra_id
        FROM medico
        WHERE especialização LIKE '%Geriatra%'
        LIMIT 1;

        IF geriatra_id IS NOT NULL THEN
            INSERT INTO agendamento (consultorio, data_consulta, hora, ID_medico, ID_hospital, ID_paciente)
            VALUES (
                NEW.consultorio,
                DATE_ADD(NEW.data_consulta, INTERVAL 7 DAY),
                NEW.hora,
                geriatra_id,
                NEW.ID_hospital,
                NEW.ID_paciente
            );
        END IF;
    END IF;
END $$

CREATE TABLE IF NOT EXISTS pacientes_observacao (
    ID INT PRIMARY KEY,
    nome VARCHAR(50),
    observacao VARCHAR(300),
    data_registro DATETIME DEFAULT CURRENT_TIMESTAMP
) $$

CREATE TRIGGER paciente_observacao
AFTER INSERT ON consulta
FOR EACH ROW
BEGIN
    DECLARE qtd INT;

    SELECT COUNT(*) INTO qtd
    FROM consulta
    WHERE ID_paciente = NEW.ID_paciente
      AND observacoes = NEW.observacoes
      AND data >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);

    IF qtd >= 3 THEN
        INSERT IGNORE INTO pacientes_observacao (ID, nome, observacao)
        SELECT ID, nome, NEW.observacoes
        FROM paciente
        WHERE ID = NEW.ID_paciente;
    END IF;
END $$

CREATE ROLE IF NOT EXISTS Secretario $$ 
CREATE ROLE IF NOT EXISTS Medico $$ 
CREATE ROLE IF NOT EXISTS Paciente $$ 

GRANT SELECT, INSERT, DELETE, UPDATE ON med_org.* TO 'Secretario' $$ 
GRANT SELECT, UPDATE ON med_org.* TO 'Medico' $$ 
GRANT SELECT ON med_org.* TO 'Paciente' $$

DELIMITER ;





